name: Integral pipeline - use the resusable
on:
  workflow_dispatch:
  push:
    branches:
      - master
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: show current folder
        run: pwd
      - name: list files
        run: ls
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        # Run dependency install only if cache hit didn't occur
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Test code
        id: code-test
        run: npm run test
      - name: Upload test report
        # Upload the test report coditionally if the test fails
        # failure runs returns true when the previous step/job failed
        if: failure() && steps.code-test.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build website
        id: build-website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  reuse:
    needs: build
    # Calling the reusable WF
    uses: ./.github/workflows/reusable-wf.yml
    with:
      app-artifact: dist-files
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ needs.reuse.outputs.firstword }}
      - name: Get build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Deploy
        run: echo "Deploying..."
  report:
    needs: lint
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: run when failes
        run: |
          echo "Issue detected ...."
          echo "${{ toJson(github) }}"
